/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Network {
  Bitcoin = 'Bitcoin',
  Regtest = 'Regtest',
  Signet = 'Signet',
  Testnet = 'Testnet',
}
export const enum LogLevel {
  Gossip = 'Gossip',
  Trace = 'Trace',
  Debug = 'Debug',
  Warn = 'Warn',
  Info = 'Info',
  Error = 'Error',
}
export interface PeerDetails {
  nodeId: string
  address: string
  isPersisted: boolean
  isConnected: boolean
}
export interface ChannelId {
  channelIdHex: Array<number>
}
export interface OutPoint {
  txid: string
  vout: number
}
export interface UserChannelId {
  userChannelIdHex: string
}
export interface ChannelDetails {
  channelId: ChannelId
  counterpartyNodeId: string
  fundingTxo?: OutPoint
  channelValueSats: number
  unspendablePunishmentReserve?: number
  userChannelId: UserChannelId
  feerateSatPer1000Weight: number
  balanceMsat: number
  outboundCapacityMsat: number
  inboundCapacityMsat: number
  confirmationsRequired?: number
  confirmations?: number
  isOutbound: boolean
  isChannelReady: boolean
  isUsable: boolean
  isPublic: boolean
  cltvExpiryDelta?: number
}
export interface PaymentPreimage {
  field0: Array<number>
}
export interface PaymentSecret {
  field0: Array<number>
}
export interface PaymentDetails {
  /** The payment hash, i.e., the hash of the `preimage`. */
  hash: PaymentHash
  /** The pre-image used by the payment. */
  preimage?: PaymentPreimage
  /** The secret used by the payment. */
  secret?: PaymentSecret
  /** The amount transferred. */
  amountMsat?: number
  /** The direction of the payment. */
  direction: PaymentDirection
  /** The status of the payment. */
  status: PaymentStatus
}
/**
 * Represents the current status of a payment.
 *
 */
export const enum PaymentStatus {
  /** The payment is still pending. */
  Pending = 'Pending',
  /** The payment suceeded. */
  Succeeded = 'Succeeded',
  /** The payment failed. */
  Failed = 'Failed',
}
/**
 * Represents the direction of a payment.
 *
 */
export const enum PaymentDirection {
  /** The payment is inbound. */
  Inbound = 'Inbound',
  /** The payment is outbound. */
  Outbound = 'Outbound',
}
export interface PaymentHash {
  field0: Array<number>
}
export class NetAddress {
  constructor(ipv4: string, port: number)
}
export class PublicKey {
  constructor(nodeId: string)
}
export class Config {
  constructor(
    storageDirPath: string,
    network: Network,
    listeningAddress: NetAddress,
    defaultCltvExpiryDelta: number,
    onchainWalletSyncIntervalSecs: number,
    walletSyncIntervalSecs: number,
    feeRateCacheUpdateIntervalSecs: number,
    logLevel: LogLevel,
  )
}
export class Builder {
  constructor()
  static fromConfig(config: Config): Builder
  setEntropySeedPath(seedPath: string): boolean
  setEntropySeedBytes(seedBytes: Array<number>): boolean
  setEntropyBip39Mnemonic(mnemonic: string, passphrase?: string | undefined | null): boolean
  setEsploraServer(url: string): boolean
  setGossipSourceP2P(): boolean
  setGossipSourceRgs(rgsServerUrl: string): boolean
  setStorageDirPath(storageDirPath: string): boolean
  setNetwork(network: Network): boolean
  setListeningAddress(listeningAddress: NetAddress): boolean
  setLogLevel(level: LogLevel): boolean
  build(): Node
}
export class Node {
  start(): boolean
  stop(): boolean
  syncWallets(): boolean
  nodeId(): string
  listeningAddress(): string | null
  newOnchainAddress(): string
  spendableOnchainBalanceSats(): number
  totalOnchainBalanceSats(): number
  receivePayment(amountMsat: number, description: string, expirySecs: number): string
  receiveVariableAmountPayment(description: string, expirySecs: number): string
  connect(nodeId: PublicKey, address: NetAddress, persist: boolean): boolean
  disconnect(counterpartyNodeId: PublicKey): boolean
  listPeers(): Array<PeerDetails>
  connectOpenChannel(nodeId: PublicKey, address: NetAddress, channelAmountSats: number): boolean
  closeChannel(channelId: ChannelId, counterpartyNodeId: PublicKey): boolean
  listChannels(): Array<ChannelDetails>
  sendPayment(invoice: string): PaymentHash
  sendPaymentUsingAmount(invoice: string, amountMsat: number): PaymentHash
  sendSpontaneousPayment(amountMsat: number, nodeId: PublicKey): PaymentHash
  listPayments(): Array<PaymentDetails>
  payment(paymentHash: PaymentHash): PaymentDetails
  removePayment(paymentHash: PaymentHash): boolean
}
